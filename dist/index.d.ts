export * from "./includes/localeGetters";
export * from "./includes/utils";
export declare function waitLocale(locale?: string): Promise<void>;
export { init } from "./configs";
export { $locale as locale } from "./stores/locale";
export { $dictionary as dictionary, $locales as locales, addMessages, } from "./stores/dictionary";
export { registerLocaleLoader as register } from "./includes/loaderQueue";
export { $isLoading as isLoading } from "./stores/loading";
import { IntlFormatterOptions } from "./types";
export { formatMessage, $format as __t, $formatDate as date, $formatNumber as number, $formatTime as time, $getJSON as json, } from "./stores/formatters";
export { getDateFormatter, getNumberFormatter, getTimeFormatter, setCustomDateFormat, setCustomNumberFormat, setCustomTimeFormat, } from "./includes/formatters";
type PluralRule = "z" | "o" | "t" | "f" | "m" | "h" | number;
export type PluralOptions = Partial<Record<PluralRule, string>>;
export declare function __interpolate(value: any): any;
export declare function __offsetPlural(value: number, offset: number, opts: PluralOptions): string;
export declare function __plural(value: number, opts: PluralOptions): string;
export declare function __select(value: any, opts: Record<any, string>): string;
export declare function __number(value: number, format?: string | IntlFormatterOptions<Intl.NumberFormatOptions>): string;
export declare function __date(value: Date, format?: string): string;
export declare function __time(value: Date, format?: string): string;
export { TypedFormat } from "./types";
